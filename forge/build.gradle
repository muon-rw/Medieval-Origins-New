import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.parchmentmc.org' }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'eclipse'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'maven-publish'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${mod_name}"
version = "${rootProject.version}+${minecraft_version}-forge"

jarJar.enable()

repositories {
    maven {
        name = "Greenhouse"
        url = 'https://repo.greenhouse.house/releases'
    }

    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
        content {
            excludeGroup "io.github.edwinmindcraft"
        }
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'}
    maven { url "https://code.redspace.io/releases" }
    maven { url "https://code.redspace.io/snapshots" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://maven.ladysnake.org/releases" }

    maven { url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven" }
    }

    maven {
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    maven { url = 'https://maven.greenhouseteam.dev/releases/' }
    maven { url = 'https://maven.theillusivec4.top' }
    maven { url = "https://modmaven.dev"
        content {
            excludeGroup "com.teamresourceful.resourcefulconfig"}
    }
    maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/" }

    mavenCentral()
    mavenLocal()
}

mixin {
    add sourceSets.main, "medievalorigins.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json", "--username", "Dev2"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":common").sourceSets.main
                    source project(":common").sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":common").sourceSets.main
                    source project(":common").sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Origins
    implementation fg.deobf("io.github.edwinmindcraft:calio-forge:${minecraft_version}-${calio_forge_version}")
    implementation fg.deobf("io.github.edwinmindcraft:apoli-forge:${minecraft_version}-${apoli_forge_version}")
    implementation fg.deobf("io.github.edwinmindcraft:origins-forge:${minecraft_version}-${origins_forge_version}")
    implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}+1.20")
    // Apugli
    implementation (jarJar(fg.deobf("net.merchantpug:Apugli:${apugli_version}+${minecraft_version}-forge"))) {
        jarJar.ranged(it, "[${apugli_version},)")
        exclude group: 'mezz.jei', module: 'jei-1.20.1-forge'
        exclude group: 'io.github.edwinmindcraft', module: 'calio-forge'
        exclude group: 'top.theillusivec4.caelus', module: 'caelus-forge'
        exclude group: 'io.github.edwinmindcraft', module: 'apoli-forge'
        exclude group: 'de.dafuqs', module: 'additionalentityattributes-forge'
        exclude group: 'org.spongepowered', module: 'mixin'
        exclude group: 'io.github.llamalad7', module: 'mixinextras-common'
        exclude group: 'io.github.llamalad7', module: 'mixinextras-forge'
    }
    // Pehkui
    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}-${minecraft_version}-forge")

    // Mixin
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    // Additional Entity Attributes
    implementation(fg.deobf("de.dafuqs:additionalentityattributes-forge:${aea_forge_version}") {
        exclude group: 'net.minecraftforge'
        exclude group: 'com.github.llamalad.mixinextras'
    })

    // Common project
    implementation project(":common")

    // Icarus
    implementation fg.deobf("maven.modrinth:icarus:${project.icarus_version}+NeoForge")
    runtimeOnly fg.deobf("com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-1.20.1:${project.resourceful_version}")
    runtimeOnly fg.deobf("mysticdrew:common-networking-forge:${project.cmnw_version}")
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))

    // Iron's Spells n Spellbooks
    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_version}:api")
    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_version}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")

    // Ice and Fire
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    implementation fg.deobf("curse.maven:citadel-331936:5633260")

    // FTB
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:5543335")
    runtimeOnly fg.deobf("curse.maven:ftb-teams-forge-404468:5267190")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938")
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(':common').sourceSets.main.resources
    exclude "medievalorigins.common.accesswidener"

    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

processTestResources {
    outputs.upToDateWhen { false }
    from project(":common").sourceSets.test.resources

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

tasks.jarJar.configure {
    archiveClassifier = ""
    dependsOn('reobfJar')
}

reobf {
    jarJar {}
}

jar.finalizedBy('reobfJarJar')

tasks.withType(AbstractPublishToMaven) {
    dependsOn('jarJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }

    repositories {
        maven {
            name = "greenhouse"
            url = "https://maven.greenhouseteam.dev/releases"
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
            authentication {
                create("basic", BasicAuthentication)
            }
        }
        mavenLocal()
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "medieval-origins-revival"
    versionNumber = "${version}"
    versionType = "release"
    versionName = "Forge/Neoforge-${rootProject.version}+${minecraft_version}"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = jar
    gameVersions = forge_game_versions.split(", ").toList()
    loaders = forge_mod_loaders.split(", ").collect { return it.toLowerCase(Locale.ROOT) }
    dependencies {
        required.project("origins-forge")
        required.project("pehkui")
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CF_TOKEN")

    def mainFile = upload(897171, jar)
    mainFile.displayName = "Forge/Neoforge-${rootProject.version}+${minecraft_version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    forge_mod_loaders.split(", ").each {
        mainFile.addModLoader(it)
    }
    forge_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }
    mainFile.addRequirement("origins-forge")
    mainFile.addRequirement("pehkui")
}

